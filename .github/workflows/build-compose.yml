name: x86-64

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      machine:
        description: 'Compile machine'
        required: true
        default: "10900T"
        type: choice
        options:
        - "10900T"
        - "10850K"


env:
  REPO_BRANCzH: stable
  CONFIG_FILE: configs/lean/lean_docker.config
  DIY_SH: scripts/lean.sh
  KMODS_IN_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  IMAGE: ghcr.io/gngpp/openwrt-build-cache:x86
  
jobs:

  DownloadSourceCode:
    runs-on: ubuntu-20.04
    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
    steps:

    - name: Show choice
      run: |
        echo "Repository choice=${{ inputs.repository }}"
        echo "Download choice=${{ inputs.download }}"
        echo "Compile choice=${{ inputs.compile }}"
        echo "Compose choice=${{ inputs.compose }}"
        echo "Compile machine=${{ inputs.machine }}"

    - name: Set Timezone
      run: |
        sudo rm -rf /etc/localtime 
        sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        date
        
    - name: Initialization Environment
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
    
    - name: Checkout
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN }}
        
    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone https://github.com/coolsnowwolf/lede openwrt

    - name: Reset Version
      id: reset
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "OPENWRTROOT=$PWD" >> $GITHUB_OUTPUT
        rm -rf .git
    - name: Clone Custom Feeds
      id: update
      run: |
        cd $OPENWRTROOT
        mkdir customfeeds
        git clone --depth=1 https://github.com/DHDAXCW/packages customfeeds/packages
        git clone --depth=1 https://github.com/DHDAXCW/luci customfeeds/luci
        chmod +x ../scripts/*.sh
        ../scripts/hook-feeds.sh
  
    - name: Update And install Feeds
      run: | 
        cd $OPENWRTROOT
        chmod +x ../scripts/*.sh
        ../scripts/feeds_settings.sh
        
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        cd $OPENWRTROOT
        chmod +x ../scripts/*.sh
        ../$DIY_SH
        ../scripts/preset-clash-core.sh arm64
        ../scripts/preset-terminal-tools.sh
        make defconfig
        
    - name: Download DLL
      id: package
      run: |
        cd $OPENWRTROOT
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        ls -lah dl
    - name: Comporession
      run: |
        tar --zstd -cf openwrt.tar.zst ./openwrt
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: ${{ env.IMAGE }}
        
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  CompileInitialize:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: [DownloadSourceCode]

    outputs:
      OPENWRTROOT: ${{ steps.clean.outputs.OPENWRTROOT }}

    steps:
  
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name'
        free -h
        uname -a
        [ -f /proc/version ] && cat /proc/version
        [ -f /etc/issue.net ] && cat /etc/issue.net
        [ -f /etc/issue ] && cat /etc/issue
        ulimit -a

    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Pull Image
      run: |
        docker pull $IMAGE
        docker images
    
    - name: Copy Files
      id: copy
      run: |
        if [[ -f openwrt.tar.zst ]]; then
            rm openwrt.tar.zst
        fi
        ID="$(docker create --name openwrt "$IMAGE")"
        docker cp $ID:/openwrt/openwrt.tar.zst ./openwrt.tar.zst
        docker rm $ID
        docker ps -a
        ls -alh

    - name: Decompression
      run: | 
        if [[ -d openwrt ]]; then
            rm -rf ./openwrt
        fi
        tar -xf openwrt.tar.zst
        ls -alh ./openwrt
        rm openwrt.tar.zst
      
    - name: Clean
      id: clean
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "OPENWRTROOT=$PWD" >> $GITHUB_OUTPUT
        rm -rf ./tmp && rm -rf ./build_dir
    
    - name: Feeds Settings
      run: | 
        cd $OPENWRTROOT
        chmod +x ../scripts/*.sh
        ../scripts/feeds_settings.sh
        make defconfig

    - name: Show config
      run: |
        cd $OPENWRTROOT
        cat .config

  CompileToolchain:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: [CompileInitialize]

    steps:
    - name: Compile toolchain
      id: compile
      run: | 
        cd ${{ needs.CompileInitialize.outputs.OPENWRTROOT }}
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc)
        make toolchain/compile -j$(nproc)
        make target/compile -j$(nproc)
        make diffconfig
  
  CompileFirmware:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: [CompileInitialize, CompileToolchain]

    outputs:
      OPENWRTROOT: ${{ steps.compile.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      FIRMWARE: ${{ steps.compile.outputs.FIRMWARE }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}
      RELEASE_DATE: ${{ steps.tag.outputs.RELEASE_DATE }}
      RELEASE_TAG: ${{ steps.tag.outputs.RELEASE_TAG }}
      RELEASE_SUCCESS: ${{ steps.tag.outputs.RELEASE_SUCCESS }}

    steps:

    - name: Compile package
      id: compile
      run: |
        cd ${{ needs.CompileInitialize.outputs.OPENWRTROOT }}
        OPENWRTROOT=$(pwd)
        echo "OPENWRTROOT=$OPENWRTROOT" >> $GITHUB_ENV
        echo "OPENWRTROOT=$OPENWRTROOT" >> $GITHUB_OUTPUT
        echo -e "$(nproc) thread compile"
        make package/compile -j$(nproc) || make package/compile -j$(nproc)
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "PLATFORM=$PLATFORM" >> $GITHUB_OUTPUT
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "TARGET=$TARGET" >> $GITHUB_OUTPUT
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_OUTPUT
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT
        echo "COMPILE_STATUS=success" >> $GITHUB_OUTPUT
    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd configs/opkg
        sed -i "s/subtarget/$SUBTARGET/g" distfeeds*.conf
        sed -i "s/target\//$TARGET\//g" distfeeds*.conf
        sed -i "s/platform/$PLATFORM/g" distfeeds*.conf
        cd $OPENWRTROOT
        mkdir -p files/etc/uci-defaults/
        cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
        mkdir -p files/etc/opkg
        cp ../configs/opkg/distfeeds-packages-server.conf files/etc/opkg/distfeeds.conf.server
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots
            cp -r bin/targets files/www/snapshots
            cp ../configs/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
        else
            cp ../configs/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
        fi
        cp files/etc/opkg/distfeeds.conf.server files/etc/opkg/distfeeds.conf.mirror
        sed -i "s/http:\/\/192.168.123.100:2345\/snapshots/https:\/\/openwrt.cc\/snapshots\/$(date +"%Y-%m-%d")\/lean/g" files/etc/opkg/distfeeds.conf.mirror
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        pushd bin/targets/x86/64
        kernelv=`cat openwrt-x86-64-generic.manifest | grep 'kernel - ' |  awk -F '[- ]' '{print $4}'`
        echo "kernel_version=$kernelv" >> $GITHUB_OUTPUT
        rm -rf openwrt-x86-64-generic-kernel.bin
        rm -rf openwrt-x86-64-generic-rootfs.tar.gz
        rm -rf openwrt-x86-64-generic-squashfs-rootfs.img.gz
        rm -rf openwrt-x86-64-generic-squashfs-combined-efi.vmdk
        rm -rf openwrt-x86-64-generic.manifest
        mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz docker-x86-64-squashfs-efi.img.gz
        popd
        make checksum
        mv bin/targets/x86/64/sha256sums bin/targets/x86/64/docker-sha256sums
        echo "GENERATE_STATUS=success" >> $GITHUB_OUTPUT
        
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
          echo "RELEASE_TAG=$(date +"%Y.%m.%d")-lede" >> $GITHUB_OUTPUT
          echo "RELEASE_DATA=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "后台地址：10.0.0.1
                默认密码：password
                docker = 带docker" > release.txt
          echo "RELEASE_SUCCESS=success" >> $GITHUB_OUTPUT

  UploadFirmware:
    runs-on: [self-hosted, Linux, X64, "${{ inputs.machine }}"]
    timeout-minutes: 1440
    needs: [CompileFirmware]

    steps:
  
    - name: Remove Images
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && needs.CompileFirmware.outputs.RELEASE_SUCCESS == 'success'
      run: | 
         MAX_DISK_USAGE=10GB
         CURRENT=$(docker system df --format '{{.Size}}' | head -n1)
         if [ $(echo "$CURRENT > $MAX_DISK_USAGE" | bc) -eq 1 ]; then
            docker rmi $(docker images -q) -f
         fi

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: needs.CompileFirmware.outputs.RELEASE_SUCCESS == 'success' && !cancelled() && env.UPLOAD_RELEASE == 'true'
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
          name: ${{ needs.CompileFirmware.outputs.RELEASE_DATE }} x86-64-Linux-${{ steps.generate.outputs.kernel_version }} 固件
          tag_name: ${{ needs.CompileFirmware.outputs.RELEASE_TAG }}
          body_path: release.txt
          files: ${{ needs.CompileFirmware.outputs.FIRMWARE }}/*

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
          keep_latest: 20
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}